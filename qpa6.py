import gmpy2
from gmpy2 import sqrt,isqrt,square,ceil,mpz,sub,iroot,div,floor
from binascii import hexlify, unhexlify

def pa6q1():
	N = mpz(179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581)

	A = mpz(ceil(sqrt(N)))
	x = mpz(sqrt(A*A- N))
	p = A+x
	q = A-x

	return (min(q, p))

def pa6q2():
	N = mpz(648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877)
	Ns2 = (mpz(sqrt(N)))

	pA = A = Ns2
	while pA-A < 2**20:
		pA = pA+1
		# calculate p and q and check for p*q=N
		x = mpz(sqrt(pA*pA- N))
		p = pA+x
		q = pA-x
		if p*q == N:
			return (min(p,q))
			break

def pa6q3():
	N = mpz(720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929)
	# A - midpoint between 3p and 2q, A-sqrt(6N) < 1
	# 3p*2q = 6N = A^2 - x^2, x = sqrt(A^2 - 6N)

	A = ceil(sqrt(6*N))-0.5
	x = sqrt(abs(A*A - 6*N))
	p=(A-x)//3
	q=(A+x)//2

	assert(gmpy2.is_prime(mpz(p),25)) # p and q are prime,
	assert(gmpy2.is_prime(mpz(q),25))
	assert(mpz(p*q) == N)	# p*q == N

	if (mpz(p*q)) == N:
		return min(mpz(p),mpz(q))
	return  (0)

def pa6q4():
	N = mpz(179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581)
	e = 65537
	c = mpz(22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540)
	A = mpz(ceil(sqrt(N)))
	x = mpz(sqrt(A*A- N))
	p = A+x
	q = A-x

	phi = (p-1)*(q-1)
	d = gmpy2.powmod(e,-1,phi)
	pt = gmpy2.powmod(c,d,N)

	pthex =  (hex(pt)).split('00')[1]
	return unhexlify(pthex)



if __name__ == "__main__":
	gmpy2.get_context().precision = 2000
	print ('PA6-1')
	print (pa6q1(),'\n')
	print ('PA6-2')
	print (pa6q2(),'\n')
	print ('PA6-3')
	print (pa6q3(), '\n')
	print ('PA6-4')
	print ( pa6q4())

